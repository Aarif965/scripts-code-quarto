---
title: "Homework: Finding Your Way in R and Python"
execute:
  error: true
author: "Aarif Baksh"
output: html_document
---

Instructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.

In Canvas, submit a link to your github repository containing the updated files. 

Note: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session). 

# Modes of Execution

Consider the 6 counting words examples in the [textbook module](https://srvanderplas.github.io/stat-computing-r-python/part-tools/04-scripts-notebooks.html#a-short-history-of-talking-to-computers) (they are in 3 separate 'your turn' sections). Look at the code, and then at the information provided for each example. What is different? What is the same? Write 2-3 sentences describing how script mode, interactive mode, and command-line mode differ in R and Python.

---

Script-mode executes pre-written code from a file, allowing users to run their codes multiple times. Interactive mode allows users to enter and execute commands line-by-line which is suitable for quick explorations but not for repeating analysis.Command-line mode enables users to execute scripts directly from the terminal or command prompt.   

---


# Programming with Variables

In this section, you'll demonstrate that you understand how to solve simple math problems using code. First, you'll want to define variables to represent the variables in the equation. Give the variables values that can be used to determine the value of the variable on the other side of the `=`. Then, write code to solve the equation for the value of the variable. 

## Pythagorean Theorem in R

$$a^2 + b^2 = c^2$$

Use the chunk below to define variables $a$, $b$, and $c$, where you define the values of $a$ and $b$, and $c$ is determined mathematically. You may need to find the square root function in R to make this work.

```{r pythagorean-theorem-r}
# Your pythagorean theorem code goes here

a <- 12
b <- 15

c <- sqrt(a^2+b^2)
cat("a=",a, "b=",b,"c=",c)

```

```{python pythagorean-theorem-py}
# Your pythagorean theorem code goes here

import math

a = 10
b = 12

c = math.sqrt(a**2+b**2)

print("a=",a,"b=",b,"c=",c)

```

## Quadratic Formula in Python

$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$

Use the chunk below to define variables $a$, $b$, and $c$, and then define $x1$ and $x2$, the possible values for $x$. You may find it helpful to define a few additional variables, such as the value of the discriminant $\sqrt{b^2 - 4ac}$, to make it easier to calculate the results. 

```{python quad-formula-py}
# Your quadratic formula code goes here


import random
import math
import cmath  # for complex numbers

# Randomly select values for a, b, and c
a = random.randint(1, 20)
b = random.randint(1, 20)
c = random.randint(1, 20)


discriminant = b**2 - 4*a*c # Calculate the discriminant to determine nature of roots

# Check if the roots are complex or real
if discriminant >= 0:
    x1 = (-b + math.sqrt(discriminant)) / (2*a)
    x2 = (-b - math.sqrt(discriminant)) / (2*a)
    print("Values selected: a =", a, "b =", b, "c =", c)          #Alternatively print(f"Values selected: a = {a}, b = {b}, c = {c}")
    print("The roots are real: Root 1 =", x1, "Root 2 =", x2)     # Alternatively print(f"The roots are complex: Root 1 = {x1}, Root 2 = {x2}")


else:
    x1 = (-b + cmath.sqrt(discriminant)) / (2*a)
    x2 = (-b - cmath.sqrt(discriminant)) / (2*a)
    print("Values selected: a =", a, "b =", b, "c =", c)          #Alternatively print(f"Values selected: a = {a}, b = {b}, c = {c}")
    print("The roots are complex: Root 1 =", x1, "Root 2 =", x2)  # Alternatively print(f"The roots are complex: Root 1 = {x1}, Root 2 = {x2}")


```


```{r quad-formula-r}
# Your quadratic formula code goes here

# Randomly select values for a, b, and c
a <- sample(1:20,1) 
b <- sample(1:20,1)
c <- sample(1:20,1)


discriminant = b^2 - 4*a*c # Calculate the discriminant to determine nature of roots

# Check if the roots are complex or real
if (discriminant >= 0){
    x1 <- (-b + sqrt(discriminant)) / (2*a)
    x2 <- (-b - sqrt(discriminant)) / (2*a)
    cat("Values selected: a =", a, "b =", b, "c =", c, "\n")          
    cat("The roots are real: Root 1 =", x1, "Root 2 =", x2)   
} else {
    x1 <- (-b + sqrt(as.complex(discriminant))) / (2*a)
    x2 <- (-b - sqrt(as.complex(discriminant))) / (2*a)
    cat("Values selected: a =", a, "b =", b, "c =", c, "\n")          
    cat("The roots are complex: Root 1 =", x1, "Root 2 =", x2)  
}

```


# Debugging practice

Look at the data frame below, which contains 3 columns: `Name`, `Salary`, and `Hire.Year`. You've read in this data from the [data file online](https://github.com/unl-statistics/stat850/blob/main/homework/02-data.tsv) and ideally, you want to plot `Hire.Year` on the x-axis and `Salary` on the y-axis (code to do this is provided).

Unfortunately, the data isn't reading in properly. Identify the problem, propose a solution, and try to implement your solution using functions on the R reference card.

Some things you may want to consider: - `gsub`, a "find and replace" function. See more details by typing `?gsub` into the R console. - You can access columns in a data frame using `$`: `df$col1` will get you `col1` of the `df` object. - You can access items in a vector using `[]`: `x[1]` will get you the first item in `x`

Note: You should be able to **identify** the problem given what you know about R from this week's reading. You may not be able to implement a solution without some additional research, so if you don't get that far that's ok.

```{r}
# This line reads in a tab-separated data file with a header naming the columns
salary <- read.table("02-data.tsv", sep = "\t", header = T)

# This code plots labels for each individual at location (x, y)
library(ggplot2)
ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label()

# This displays the salary object
salary

summary(salary)

```

------------------------------------------------------------------------

The problem with the data is: the salary for Michael Scott had an extra character ($) which was not recognized as being numerically bigger than any of the other salary values. Another issue was that two text labels on the scatterplot extended beyond the plot area, making them only partially visible.     

Here is how I solved the problem:

```{r cleaning-the-data-r}
# Your implementation code goes here

# This line reads in a tab-separated data file with a header naming the columns
salary <- read.table("02-data.tsv", sep = "\t", header = T)

install.packages("readr")

library(readr)

salary$Salary[1] <- parse_number(salary$Salary[1]) #Access Michael's salary and remove the '$' character

# This code plots labels for each individual at location (x, y)
library(ggplot2)
ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label()

install.packages("ggrepel")
library(ggrepel)

?geom_label_repel

ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label_repel() #Prevent labels from going off screen


# This displays the salary object
salary

#Interpret plot for 1/2 point

#The scatterplot shows a negative relationship between year of hire and salary. Specifically, individuals hired more recently tend to have lower salaries compared to those who were hired earlier. This trend suggests that people who were hired for a longer period of time, and are therefore more experienced, tend to have higher salaries than those who are relatively newer at the job. 
```
